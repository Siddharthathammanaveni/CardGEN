// Utility to export an SVG element with metadata and optional style embedding
// Usage: exportSvgElement(svgEl, 'file.svg', { title, description, generator })

export function exportSvgElement(svgEl, filename = 'logo.svg', meta = {}) {
  if (!svgEl) return

  const clone = svgEl.cloneNode(true)

  // Ensure XMLNS
  clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg')
  clone.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink')

  // Insert metadata
  const { title, description, generator } = meta
  const metaNodes = []
  if (title) {
    const t = document.createElementNS('http://www.w3.org/2000/svg', 'title')
    t.textContent = title
    metaNodes.push(t)
  }
  if (description) {
    const d = document.createElementNS('http://www.w3.org/2000/svg', 'desc')
    d.textContent = description
    metaNodes.push(d)
  }
  if (generator) {
    const m = document.createElementNS('http://www.w3.org/2000/svg', 'metadata')
    m.textContent = `Generated by ${generator}`
    metaNodes.push(m)
  }
  if (metaNodes.length) {
    const firstChild = clone.firstChild
    metaNodes.forEach(node => clone.insertBefore(node, firstChild))
  }

  // Basic font embedding hint: capture computed font-family on root
  // Note: full font file embedding is out-of-scope here; this preserves family names
  const computed = window.getComputedStyle(svgEl)
  const rootFont = computed.fontFamily || 'Inter, system-ui, sans-serif'
  const style = document.createElementNS('http://www.w3.org/2000/svg', 'style')
  style.setAttribute('type', 'text/css')
  style.textContent = `text { font-family: ${rootFont}; }`
  clone.insertBefore(style, clone.firstChild)

  const serializer = new XMLSerializer()
  const svgString = serializer.serializeToString(clone)
  const blob = new Blob([svgString], { type: 'image/svg+xml;charset=utf-8' })
  const url = URL.createObjectURL(blob)

  const link = document.createElement('a')
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}
